# -*- coding: utf-8 -*-
"""Satisfaction Level.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dAVkq4LTQaSVC6U5IK92CqkTG6qO2Ywa
"""

#Import modul
import numpy as np
import pandas as pd
import statsmodels
import patsy
import statsmodels.api as sm
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder

#import model
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics

import warnings
warnings.filterwarnings("ignore")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

#baca data
df = pd.read_csv('customerbehaviourkb.csv')
df.head()

"""# Berhubung data tidak berdistribusi normal, kita coba pakai model Random Forest"""

#input fitur
X = df[['Age', 'Items Purchased', 'Spend per Item', 'Average Rating', 'Discount Applied', 'Days Since Last Purchase']]
y = df['Satisfaction Level']

# Training dan testing set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(X_train.shape,y_train.shape,X_test.shape,y_test.shape)

# Membuat model Random Forest Regressor
model = RandomForestRegressor(random_state=42, n_estimators=100)

# Melatih model
model.fit(X_train, y_train)

# Prediksi pada data testing
y_pred = model.predict(X_test)

# Evaluasi model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

X_test

# Assuming 'model' is your trained RandomForestRegressor
#Age, Items (counts), Spend per Item, Average Rating, Discount Applied Yes = 1/ No = 0, Days Since Last Purchase)
example = [[35, 4, 11200, 4, 0, 15]]
satisfaction_level = model.predict(example)

# Convert the predicted value to an integer between 0 and 2
predicted_class = int(round(satisfaction_level[0]))

# Ensure the predicted class is within the valid range
predicted_class = max(0, min(predicted_class, 2))

# Map the predicted class to the corresponding label
satisfaction_labels = ["Unsatisfied", "Neutral", "Satisfied"]
predicted_label = satisfaction_labels[predicted_class]

print(f'Predicted Satisfaction Level: {predicted_label}')